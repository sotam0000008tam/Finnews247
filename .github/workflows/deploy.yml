name: "üöÄ Deploy Finnews247 to Windows VPS"

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-finnews247
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 40

    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üóÇÔ∏è Ensure target folders
        shell: pwsh
        run: |
          $dst = 'C:\apps\finnews247'
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          New-Item -ItemType Directory -Force -Path "$dst\logs" | Out-Null

      - name: ‚èπÔ∏è Stop app (Scheduled Task, ignore if not running)
        shell: pwsh
        run: |
          $task = 'finnews247'
          schtasks /Query /TN $task *> $null
          if ($LASTEXITCODE -eq 0) { schtasks /End /TN $task *> $null }

      - name: üßπ Clean target (keep logs)
        shell: pwsh
        run: |
          $dst = 'C:\apps\finnews247'
          Get-ChildItem $dst -Force | Where-Object { $_.Name -ne 'logs' } |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Force -Path "$dst\public" | Out-Null
          # If public\images was a junction, remove it
          $img = Join-Path $dst 'public\images'
          if (Test-Path $img) {
            $itm = Get-Item $img -Force
            if ($itm.Attributes -band [IO.FileAttributes]::ReparsePoint) { cmd /c rmdir "$img" }
          }

      - name: üì§ Copy source to target
        shell: pwsh
        run: |
          $src = "$env:GITHUB_WORKSPACE"
          $dst = 'C:\apps\finnews247'
          Copy-Item -Path (Join-Path $src '*') -Destination $dst -Recurse -Force `
            -Exclude '.git','.github','.vscode','node_modules','.next'

      - name: üßΩ Fix JSON encoding (remove UTF-8 BOM)
        shell: pwsh
        run: |
          $dst = 'C:\apps\finnews247'
          $utf8NoBom = New-Object System.Text.UTF8Encoding($false)
          $files = Get-ChildItem -Path "$dst\data" -Filter *.json -Recurse -ErrorAction SilentlyContinue
          foreach ($f in $files) {
            $c = Get-Content $f.FullName -Raw
            [System.IO.File]::WriteAllText($f.FullName, $c, $utf8NoBom)
          }

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: üì¶ Install dependencies
        shell: pwsh
        working-directory: C:\apps\finnews247
        run: |
          npm ci || npm install

      - name: üèóÔ∏è Build Next.js
        shell: pwsh
        working-directory: C:\apps\finnews247
        run: |
          npm run build

      - name: üìù Create start script
        shell: pwsh
        run: |
          $dst = 'C:\apps\finnews247'
          $script = @"
@echo off
cd /d C:\apps\finnews247
set NODE_ENV=production
set PORT=80
"C:\Program Files\nodejs\node.exe" node_modules\next\dist\bin\next start -p %PORT% >> "C:\apps\finnews247\logs\out.log" 2>> "C:\apps\finnews247\logs\err.log"
"@
          Set-Content -Path "$dst\start_finnews247.cmd" -Value $script -Encoding ASCII

      - name: üóìÔ∏è Register/Update scheduled task
        shell: pwsh
        run: |
          schtasks /Create /TN "finnews247" /TR "C:\apps\finnews247\start_finnews247.cmd" /SC ONSTART /RU SYSTEM /RL HIGHEST /F

      - name: ‚ñ∂Ô∏è Start app
        shell: pwsh
        run: |
          schtasks /Run /TN "finnews247"
          Start-Sleep -Seconds 6

      - name: ‚úÖ Health check
        shell: pwsh
        run: |
          $ok = $true
          try {
            $r = Invoke-WebRequest -Uri 'http://127.0.0.1/' -UseBasicParsing -TimeoutSec 15
            if ($r.StatusCode -ne 200) { $ok = $false }
            $r2 = Invoke-WebRequest -Uri 'http://127.0.0.1/logo.png' -UseBasicParsing -TimeoutSec 15
            if ($r2.StatusCode -ne 200) { $ok = $false }
          } catch { $ok = $false }
          if (-not $ok) { throw "Health check failed." }
          Write-Host "App is healthy."
